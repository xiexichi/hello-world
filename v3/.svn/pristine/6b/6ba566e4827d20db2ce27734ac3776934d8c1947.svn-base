<?php

namespace app\article\model;

class Categorys extends Base
{
    protected $name = 'article_categorys';

	public function getCateAll($data){

        $where['is_deleted'] = 0;
		$whereOr = [];
		if(isset($data['pid'])){//获取某父级下的子级
            $where['parent_id'] = $data['pid'];
            $whereOr['id'] = $data['pid'];
        }

        $cateAll = $this->where($where)->whereOr($whereOr)
        	->order('sort','desc')
            ->select();
 
        if( !empty($cateAll) ){
            foreach( $cateAll as $k => $v ){
                $v['value'] = $v['id'];
                $cateAll[$k] = $v;
            }
        }
        $geType = empty($data['showType']) ? 'list' : $data['showType'];
        switch( $geType ){
            case 'list' ://一维数组
                $list = $cateAll;
                break;
            case 'tree' ://普通多维树状数组
                $list = $this->setTree($cateAll);
                break;
            default :
                $list = $cateAll;
                break;
        }
        return $list;
	}

    public function setTree($arr_all,$parent_id=0,$relation=['parent'=>'id','son'=>'parent_id']){
        $tree_arr = [];
        if( empty($relation) || empty($arr_all) ){
            return $arr_all;
        }
        
        $parent = isset($relation['parent']) ? 'id' : $relation['parent'];
        $son = isset($relation['son']) ? 'parent_id' : $relation['son'];

        if( !empty($arr_all) ){
            foreach( $arr_all as $tkey => $t ){
                if( $t[$son] == $parent_id ){
                    $t['children'] = $this->setTree($arr_all,$t[$parent],$relation);
                    $tree_arr[] = $t;
                }
            }
        }
        return $tree_arr;
    }


    public function checkRepeatCateName($where=[]){

        if( !empty($this->data['name']) ){//前置方法使用
            $this->where('name',$this->data['name']);
        }
        if( !empty($where) ){
            foreach( $where as $k => $v ) {
                $this->where($k,$v[0],$v[1]);
            }
        }

        $info = $this->find();
        if($info){
            $this->code = 200402;
            $this->isExit = true;
            $this->error = "分类名已存在！";
            return false;
        }
        return true;
    }


    public function addBefore(){
        $this->data['create_time'] = date('Y-m-d H:i:s');
        $this->data['update_time'] = $this->data['create_time'];
        return true;
    }

    public function editBefore(){
        $this->data['update_time'] = date('Y-m-d H:i:s');
        return true;
    }

    public function delBefore(){

        $where['is_deleted'] = 0;
        $where['categorys_id'] = $this->data['ids'];
        $ids = $this->data['ids'];

        // 查询分类下是否有子分类
        $isCate = $this->where('parent_id',$ids)->find();
        // pe($this->getLastSql());

        //查询分类下是否有文章
        $article = new \app\article\model\Article();
        $isArticle = $article->where($where)->find();

        if ($isArticle || $isCate) {
            $this->isExit=true;
            $this->code=200101;
            $this->error="分类下有文章或子分类,不能删除";
            return false;
        }
        $this->where('id','in', $ids);
        return true;
    }

}