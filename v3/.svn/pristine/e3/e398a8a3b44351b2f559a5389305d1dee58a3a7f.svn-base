<?php

namespace app\goods\model;
use app\goods\controller\Prop;
use think\Db;
use think\Exception;

class AttributeGroup extends Base
{
    protected $name = 'goods_attr_group';

    public function getAttrGroupAll($page=1,$limit=10,$getCount=false){
        $pageSize = ( $page - 1 ) * $limit.','.$limit;
        if($limit=0){
            $pageSize = '';
        }
        $data['list'] = $this->limit($pageSize)->select();
        if($getCount){
            $info = $this->field('count(*) as num')->find();
            $data['count'] = $info['num'];
        }
        return $data;
    }

    /**
     * 获取参数组信息
     * @param $ids
     * @return array|bool|false|\PDOStatement|string|Model
     */
    public function getAttrGroupInfo($ids){
        $info = $this->where('id',$ids)->find();
        if(empty($info)){
            $this->code = 200404;
            $this->error = "参数组不存在";
            return false;
        }
        return $info;
    }

    public function addBefore(){
        // 设置添加时间
        $this->data['create_time'] = date('Y-m-d H:i:s');
        $this->data['update_time'] = $this->data['create_time'];
        if( !$this->checkRepeatGroupName() ){
            return false;
        }
        return true;
    }

    /**
     * 更新参数组
     * @param $ids
     */
    public function saveAttrGroupInfo($data){
        if( empty($data['id']) || empty($data['group_name']) ){
            return false;
        }
        $where['group_name'] = ['=',$data['group_name']];
        $where['id'] = ['<>',$data['id']];
        if( !$this->checkRepeatGroupName($where) ){
            return false;
        }
        $this->startTrans();
        try{
            $updateData['group_name'] = $data['group_name'];
            $updateData['update_time'] = date('Y-m-d H:i:s');
            if( !$this->where('id',$data['id'])->update($updateData) ){
                $this->code = 200410;
                throw new Exception('网络错误，保存失败！');
            }
            //保存成员组配置
            $groupValModel = new \app\goods\model\AttributeGroupVal();
            if( !$groupValModel->saveGroupVals($data['id'],$data['attr']) ){
                $this->code = 200411;
                throw new Exception('网络错误，保存失败！');
            }
            $this->commit();
        }catch( Exception $e ){
            $this->rollback();
            $this->error = $e->getMessage();
            return false;
        }
        return true;
    }

    /**
     * 检查参数组名唯一
     * @param array $where  额外条件
     * @return bool
     */
    public function checkRepeatGroupName($where=[]){
        if(!empty($this->data['group_name'])){//前置方法使用
            $this->where('group_name',$this->data['group_name']);
        }
        if( !empty($where) ){
            foreach( $where as $key => $val ) {
                $this->where($key,$val[0],$val[1]);
            }
        }
        $info = $this->find();
        if($info){
            $this->code = 200402;
            $this->isExit = true;
            $this->error = "参数组名已存在！";
            return false;
        }
        return true;
    }

    public function deleted($ids){
        $this->startTrans();
        try{
            //检查是否存在
            $info = $this->where('id',$ids)->find();
            if(empty($info)){
                $this->code = 200404;
                throw new Exception('删除项不存在');
            }
            if( !$this->where('id',$ids)->delete() ){
                $this->code = 200410;
                throw new Exception('网络错误，删除失败');
            }
            //删除参数成员
            $groupValModel = new \app\goods\model\AttributeGroupVal();
            $attr_list = $groupValModel->getGroupVals($ids);
            if(!empty($attr_list)){
                if( !$groupValModel->where('goods_attr_group_id',$ids)->delete() ){
                    $this->code = 200411;
                    throw new Exception('网络错误，删除失败');
                }
            }
            $this->commit();
        }catch( Exception $e ){
            $this->rollback();
            $this->error = $e->getMessage();
            return false;
        }
        return true;
    }

}
