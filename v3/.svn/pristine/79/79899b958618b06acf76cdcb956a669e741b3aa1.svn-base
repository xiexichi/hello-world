<?php

/**
 * 
 */

namespace app\depot\model;

class Stock extends Base
{

	/**
	 * [getItems description]
	 * @param  [type] $item_code        [description]
	 * @param  [type] $product_color_id [description]
	 * @return [type]                   [description]
	 */
	public function getItems($item_code, $product_color_id, $shop_id, $key_type = NULL, $shop_depot_pre_select_id = NULL){

		// pe($this->connection);
		// 将对象转换为数组方法：collection()->toArray()
		$this->alias('a')
			 ->field('a.*,a.id stock_id,IFNULL(sd.quantity, 0) shop_quantity,"" pre_select_quantity')
			 ->join("shop_depot sd", "a.id = sd.stock_id AND sd.shop_id = {$shop_id}", 'LEFT')
			 ->where('a.item_code', $item_code)
			 ->where('a.product_color_id', $product_color_id);

		// 如果有预选标签id
		if ($shop_depot_pre_select_id) {
			$this->field('sdpsi.quantity pre_select_quantity')
				 ->join('shop_depot_pre_select sdps', "sdps.id = {$shop_depot_pre_select_id}", 'LEFT')
				 ->join('shop_depot_pre_select_item sdpsi', "sdpsi.shop_depot_pre_select_id = sdps.id AND a.id = sdpsi.stock_id", 'LEFT');
		}

		$items = collection($this->select())->toArray();


		if ($key_type = 'size') {
			$newItems = [];
			foreach ($items as $k => $v) {

				// 拆分码数
				$skuNameArr = explode(' ', $v['sku_name']);

				if (count($skuNameArr) > 1) {
					$v['size'] = trim($skuNameArr[1]);
				} else {
					$v['size'] = trim($skuNameArr[0]);
				}

				// 添加数据
				$newItems[$v['size']] = $v;
			}

			return sizeKeySort($newItems);
		}


		return $items;
	}


}