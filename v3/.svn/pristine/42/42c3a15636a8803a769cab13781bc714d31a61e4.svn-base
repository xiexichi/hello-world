<?php

namespace app\order\model;
use \app\common\controller\Service;
use \app\cart\model\Cart;
use think\Exception;

class Order extends Base
{
    protected $name = 'order_info';
    protected $pk = 'order_id';

    protected $channel;//下单渠道

    //下单使用的配置内容
    protected $user_level;//会员等级

    protected $point = 0;//下单使用的积分数
    protected $point_proprotion = 0;//积分使用比例

    protected $coupon_list = array();//[商家id=>['用户优惠券id','用户优惠券id']]

    protected $shop_list;//计算处理后的下单商家参数集
    protected $discount_content = array();//下单所有已使用的优惠类型

    protected $shop_delivery = array();//物流类型

    //店铺类型 在这里暂存 很多地方都有调用 你们想换位置放就换吧
    const SHOP_TYPE_ALL = 1;
    const SHOP_TYPE_ONLINE = 2;
    const SHOP_TYPE_OFFLINE = 3;

    public static $map_shop_type = array(
        self::SHOP_TYPE_ALL => array(
            'desc' => '线上线下',
        ),
        self::SHOP_TYPE_ONLINE => array(
            'desc' => '线上',
        ),
        self::SHOP_TYPE_OFFLINE => array(
            'desc' => '线下',
        ),
    );

    //订单审核
    const ORDER_VERIFY_ING = 0;
    const ORDER_VERIFY_PASS = 1;
    const ORDER_VERIFY_LOSE = 2;

    public static $map_order_verify = array(
        self::ORDER_VERIFY_ING => array(
            'desc' => '审核中',
        ),
        self::ORDER_VERIFY_PASS => array(
            'desc' => '审核通过',
        ),
        self::ORDER_VERIFY_LOSE => array(
            'desc' => '审核不通过',
        ),
    );

    //订单发货类型
    const ORDER_TYPE_ONLINE = 0;
    const ORDER_TYPE_O2O = 1;
    const ORDER_TYPE_O2O_ONLINE = 2;

    public static $map_order_type = array(
        self::ORDER_TYPE_ONLINE => array(
            'desc' => '线上发货',
        ),
        self::ORDER_TYPE_O2O => array(
            'desc' => '自提单',
        ),
        self::ORDER_TYPE_O2O_ONLINE => array(
            'desc' => '门店线上发货',
        ),
    );

    //下单渠道类型 商品 购物车 下单 订单 基本都用到了
    const CHANNEL_PC = 1;
    const CHANNEL_MOBILE = 2;
    const CHANNEL_WEAPP = 3;
    const CHANNEL_O2O = 4;
    const CHANNEL_APP = 5;

    public static $map_channel = array(
        self::CHANNEL_PC => array(
            'desc' => 'PC端',
        ),
        self::CHANNEL_MOBILE => array(
            'desc' => '移动端',
        ),
        self::CHANNEL_WEAPP => array(
            'desc' => '小程序',
        ),
        self::CHANNEL_O2O => array(
            'desc' => '店铺',
        ),
        self::CHANNEL_APP => array(
            'desc' => 'APP',
        )
    );

    public function getShopList(){
        return $this->shop_list;
    }

    public function getOrderDiscountContent(){
        return $this->discount_content;
    }

    /**
     * 设置下单使用的优惠内容参数 //这里我比较倾向于使用 redis
     * @param array $content
     */
    public function setInfoContent($content=array()){
        if(!is_array($content)){
            $this->error = '营销活动内容设置格式错误';
            return false;
        }
        foreach($content as $disType => $disVal ){
            switch($disType){
                case 'shop_delivery' ://物流类型
                    if( !is_array($disVal) ){
                        $this->error = '物流方式使用失败';
                        return false;
                    }
                    //$disVal demo
                    //[商家id=>物流方式id]
                    $this->address_id = $disVal;
                    break;
                case 'channel' ://操作渠道
                    if( !isset(self::$map_channel[$disVal]) ){
                        $this->error = '下单渠道错误';
                        return false;
                    }
                    $this->channel = $disVal;
                    break;
                case 'user_level' ://会员等级
                    if( !is_int($disVal) ){
                        $this->error = '会员等级异常';
                        return false;
                    }
                    $this->user_level = $disVal;
                    break;
                case 'point' ://积分
                    if( !is_numeric($disVal) ){
                        $this->error = '积分使用错误';
                        return false;
                    }
                    $this->point_proprotion = getSystemSet('INTEGRAL_TO_RMB_PRO');//系统全局参数 RMB积分比例
                    $this->point = $disVal;
                    break;
                case 'coupon' :
                    //$disVal demo
                    //[商家1id=>[用户优惠券id1,用户优惠券id2],商家2id=[用户优惠券id]]
                    $disVal = ['1'=>[1,4]];//测试用
                    if( !is_array($disVal) ){
                        $this->error = '优惠券使用错误';
                        return false;
                    }
                    //检查是否重复使用
                    $check_coupon = [];
                    foreach( $disVal as $shop_id => $coupon ){
                        if( is_array($coupon) ){
                            foreach( $coupon as $use_coupon_id ){
                                if( in_array($use_coupon_id,$check_coupon) ){
                                    $this->error = '优惠券不能重复使用';
                                    return false;
                                }
                                $check_coupon[] = $use_coupon_id;
                            }
                        }else{
                            if( in_array($coupon,$check_coupon) ){
                                $this->error = '优惠券不能重复使用';
                                return false;
                            }
                            $check_coupon[] = $coupon;
                        }
                    }
                    $this->coupon_list = $disVal;
                    break;
                default :
                    $this->error = '不存在'.$disType.'优惠类型';
                    return false;
                    break;
            }
        }
        return true;
    }

    //创建单号
    public function createSn()
    {
        //下单渠道+年+月+日+时+时间戳后3位+随机数3位 总长度15位
        $sn = $this->channel . substr(date('Y'),-2,2).date('m').date('d').date('H').substr(time(), -3, 3) . rand(100, 999);
        return $sn;
    }

    /**
     * 获取订单状态描述
     * @param $orderInfo        订单数据集
     * @return string
     */
    public function orderStatusDesc($orderInfo){
        $desc = '';
        switch( $orderInfo['order_status'] ){
            case '40' :
                $desc = '已取消';
                break;
            case '45' :
                $desc = '取消中';
                break;
            default :
                if( $orderInfo['verify'] == 1 ){
                    if( $orderInfo['finished_status'] == 1 ){
                        $desc = '已完成';
                    }
                    if( $orderInfo['finished_status'] && $orderInfo['evaluation_status'] == 0 ){
                        $desc = '待评价';
                    }
                    if( $orderInfo['finished_status'] == 0 ){
                        $desc = '待收货';
                    }
                    if( $orderInfo['shipping_status'] == 0 ){
                        $desc = '待发货';
                    }
                    if( $orderInfo['order_type'] == self::ORDER_TYPE_O2O && $orderInfo['finished_status'] == 0 ){
                        $desc = '待自提';
                    }
                }else if( $orderInfo['verify'] == 2 ){
                    $desc = '审核不通过';
                }else{
                    $desc = '待审核';
                }
                if( $orderInfo['pay_status'] == 0 ){
                    $desc = '待支付';
                }
                break;
        }
        return $desc;
    }

    public function indexAfter(){
        $orderGoodsModel = new \app\order\model\OrderGoods();
        if( !empty($this->data) ){
            $server = new Service();
            //防止冗余查询 不能用session 视图层和数据层会话不同 会重置
            $shop_list = [];
            $user_list = [];
            foreach( $this->data as $key => $order ){
                //获取店铺信息
                $shop_info = null;
                if( empty($shop_list[$order['shop_id']]) ){
                    //不要问我为什么这么慢 怪他 没了它提速 80%↓
                    $shop_info = $server->setHost('center_data')->post('merchant/shop/one',['id'=>$order['shop_id']]);
                    if( empty($shop_info) ){
                        $shop_info = null;
                    }
                    $shop_list[$order['shop_id']] = $shop_info;
                }else{
                    $shop_info = $shop_list[$order['shop_id']];
                }
                $order['order_type_desc'] = self::$map_order_type[$order['order_type']]['desc'];
                $order['add_channel'] = self::$map_channel[$order['add_channel']]['desc'];
                $shop_info['shop_sale_type_id'] = self::$map_shop_type[$shop_info['shop_sale_type_id']]['desc'];
                $order['shop_info'] = $shop_info;
                if( empty($user_list[$order['user_id']]) ){
                    //不要问我为什么这么慢 怪他 没了它提速 60%↓
                    $order['user_info'] = $server->setHost('center_data')->post('user/user/one',['id'=>$order['user_id']]);
                    $user_list[$order['user_id']] = $order['user_info'];
                }else{
                    $order['user_info'] = $user_list[$order['user_id']];
                }
                //获取商品列表
                $order['goods_list'] = $orderGoodsModel->getItemList($order['order_id'],6);
                $order['orderStatusDesc'] = $this->orderStatusDesc($order);
                $this->data[$key] = $order;
            }
        }
    }

    public function editBefore(){
        $this->data['update_time'] = date('Y-m-d H:i:s');
    }

    /**
     * 获取下单页预购商品
     * @param int $user_id              会员id
     * @param array $shop_delivery      商家物流方式
     * @param int $shop_id              商家id
     * @param int $channel              获取频道
     * action   没有处理百分比计算缺少值  即 100元优惠 三个订单or商品
     */
    public function getBuyGoodsList($user_id,$shop_id=0){
        $cartModel = new Cart();
        $cart_list = $cartModel->getCartList($user_id,$shop_id,$this->channel,true);
        $cart_list = $cartModel->cartValid($cart_list);
        if( empty($cart_list) ) {
            $this->error = '没有需购商品';
            return $cart_list;
        }
        $couponModel = new \app\activity\model\Coupon();
        $couponUserModel = new \app\activity\model\CouponUser();
        //添加优惠券列表信息
        $cart_list = $couponUserModel->getCartCoupon($user_id,$cart_list);
        $can_use_coupon_all = $couponUserModel->getOrderCouponAll();
        //优惠券处理
        //获取优惠券优惠信息 coupon * n
        $coupon_list = $this->coupon_list;
        $shop_coupon = [];
        if( !empty($coupon_list) ){
            //检查是否非同券叠加复合使用
            foreach( $coupon_list as $shop => $coupon ){
                $shop_coupon[$shop] = [];
                $coupon_id = 0;
                foreach( $coupon as $use_coupon_id ){
                    if( !isset($can_use_coupon_all[$use_coupon_id]) ){
                        $this->error = '使用了不可用优惠券';
                        return false;
                    }
                    if( $coupon_id == 0 ){
                        $coupon_id = $can_use_coupon_all[$use_coupon_id]['id'];
                    }else if( $coupon_id != $can_use_coupon_all[$use_coupon_id]['id'] ){
                        $this->error = '店铺只能相同优惠券叠加使用';
                        return false;
                    }
                    $shop_coupon[$shop][] = $can_use_coupon_all[$use_coupon_id];
                }
            }
            $this->discount_content['coupon'] = $shop_coupon;
        }
        //获取积分 rmb 抵扣比例 转 rmb 抵扣的金额
        $point = &$_point;
        $point = $this->point;
        if( $point > 0 ){
            $_point = bcdiv($point ,$this->point_proprotion,2);//写死测试
            $this->discount_content['point'] = $this->point_proprotion;
        }
        //活动
        $activity = 0;//测试写死
        if( $activity > 0 ){
            //获取活动内容
            $this->discount_content['activity'][] = '买满XXX然后XXX的优惠';
        }
        //余额抵扣
        //获取合计信息 不含运费
        $order_total = $this->getTotal($user_id,$cart_list,0,$shop_id,$this->channel);
        if( $order_total === false ){
            return $cart_list;
        }
        $deliveryModel = new \app\system\model\Delivery();
        $persenShopTotal = 1; //比率基准值
        foreach( $cart_list as $skey => $shop ){
            //获取物流方式列表
            $delivery_where['status'] = 1;
            $delivery_where['shop_id'] = $shop['shop_id'];
            $shop['delivery_list'] = $deliveryModel->field('id,shop_id,delivery_name,delivery_desc')
                ->where($delivery_where)
                ->order('is_default','desc')
                ->select();
            //获取店铺订单金额百分比占额
            $shop_percent = bcdiv($shop['goods_price'],$order_total['goods_price'],2);
            $persenShopTotal = bcsub($persenShopTotal,$shop_percent,2);

            //营销互动模块
            // 主动应用部分 1 - 5 部分在购物车处理
            // 1.秒杀活动 2.套餐活动 3.拼团活动 4.满减活动 5.会员等级折扣
            // 被动使用部分在这里处理
            // 6.优惠券
            if( !empty($shop_coupon[$shop['shop_id']]) ){
                $coupon_price = 0;
                $_goods_total = $shop['goods_price'];
                foreach( $shop_coupon[$shop['shop_id']] as $ckey => $coupon ){
                    //若有使用条件要求则判断 总额递减计算
                    if( $coupon['limit_price'] > 0 && $coupon['limit_price'] > $_goods_total ){
                        if($ckey == 0 ){
                            $this->error = '优惠券金额没有达到';
                        }else{
                            $this->error = '优惠后没有达到优惠券使用要求';
                        }
                        return false;
                    }
                    //最大使用数
                    if( $coupon['use_max_qty'] != 0 && $ckey+1 > $coupon['use_max_qty'] ){
                        $this->error = '此优惠券最多叠加使用'.$coupon['use_max_qty'].'张';
                        return false;
                    }
                    //根据类型使用
                    switch( $coupon['type'] ){
                        case $couponModel::TYPE_MONEY ://直接抵扣
                            $coupon_price = bcadd($coupon_price,$coupon['discount_value'],2);
                            //扣减
                            $_goods_total = bcsub($_goods_total,$coupon['discount_value'],2);
                            break;
                        case $couponModel::TYPE_PERCEN ://折扣
                            //转persen计算
                            $dis_val = bcsub(1,bcdiv($coupon['discount_value'],10,3),3);
                            $coupon['discount_value'] = bcmul($_goods_total,$dis_val,2);
                            $coupon_price = bcadd($coupon_price,$coupon['discount_value'],2);
                            //扣减
                            $_goods_total = bcsub($_goods_total,$coupon['discount_value'],2);
                            break;
                        default :
                            $this->error = '优惠券使用类型错误';
                            return false;
                            break;
                    }
                }
                $shop['coupon_price'] = $coupon_price;
            }
            //积分使用 (不计入优惠券要求规则 作为支付方式抵扣使用)
            //积分优惠计算
            if( $point > 0 ) {
                $shop['point_price'] = bcmul($point,$shop_percent,2);
                $_point = bcsub($_point,$shop['point_price'],2);
            }
            //检查因百分比缺失 或超减 最后一个商家 处理优惠
            if( $point > 0 && $skey+1 == count($cart_list) ){
                if( $_point > 0 ){
                    $shop['point_price'] = bcadd($shop['point_price'],$_point,2);
                    if( $persenShopTotal > 0 && $_point > 0 ) {
                        $shop_percent = bcadd($shop_percent,$persenShopTotal,2);
                    }
                }else if( $_point < 0 || $persenShopTotal < 0 ){
                    $this->error = '购物车商品信息计算错误';
                    return false;
                }
            }
            $shop['percent'] = $shop_percent;
            $goodsCoupon = $shop['coupon_price'];
            $goodsPoint = $shop['point_price'];
            $goodsDiscount = $shop['discount_price'];//这部分在购物车计算了
            $persenGoodsTotal = 1; //比率基准值
            //商品计算部分 ( 优惠分配 )
            foreach( $shop['goods_list'] as $gkey => $goods  ){
                $goods_percent = bcdiv($goods['sum_price'],$shop['goods_price'],2);
                $persenGoodsTotal = bcsub($persenGoodsTotal,$goods_percent,2);

                //计算优惠券比率分摊
                $goods['coupon_price'] = bcmul($shop['coupon_price'],$goods_percent,2);
                $goodsCoupon = bcsub($goodsCoupon,$goods['point_price'],2);

                //计算积分使用均摊
                $goods['point_price'] = bcmul($shop['point_price'],$goods_percent,2);
                $goodsPoint = bcsub($goodsPoint,$goods['point_price'],2);

                //计算优惠特殊活动均摊
                $goods['discount_price'] = bcmul($shop['discount_price'],$goods_percent,2);
                $goodsDiscount = bcsub($goodsDiscount,$goods['discount_price'],2);
                //检查百分比缺失 或超减
                if( $gkey+1 == count($shop['goods_list']) ){
                    //优惠券
                    if( $goodsCoupon >= 0 ){
                        $goods['coupon_price'] = bcadd($goods['coupon_price'],$goodsDiscount,2);
                    }else {
                        $this->error = '优惠券信息计算错误';
                        return false;
                    }
                    //积分
                    if( $goodsPoint >= 0 ){
                        $goods['point_price'] = bcadd($goods['point_price'],$goodsPoint,2);
                    }else {
                        $this->error = '积分信息计算错误';
                        return false;
                    }
                    //活动优惠
                    if( $persenGoodsTotal >= 0 ) {
                        $goods_percent = bcadd($goods_percent,$persenGoodsTotal,2);
                    }else{
                        $this->error = '活动信息计算错误';
                        return false;
                    }
                }
                $goods['percent'] = $goods_percent;
                $shop['goods_list'][$gkey] = $goods;
            }
            $cart_list[$skey] = $shop;
        }
        return $cart_list;
    }

    /**
     * 以购物车未基准计算代入运费
     * @param $template     原使用统一平台运费模板使用参数 （现为使用商家独自的运费模板计算）
     * @param $address_info
     * @param $cart_list
     * @param $shop_delivery    array('商家id'=>"物流方式id")
     * @return mixed
     */
    public function setShopShip($address_info,$cart_list){
//        if( empty($template) || empty($cart_list) ){
        if( empty($cart_list) || empty($address_info) ){
            return $cart_list;
        }
        $deliveryModel = new \app\system\model\Delivery();
        foreach( $cart_list as $key => $shop ) {
            //获取商家运费模板
            $delivery_id = empty($this->shop_delivery[$shop['shop_id']]) ? 0 : $this->shop_delivery[$shop['shop_id']];
            $deliveryTp = $deliveryModel->getDeliveryTp($shop['shop_id'],$delivery_id,$address_info['prov_id']);
            if($shop['shop_sale_type_id'] != self::SHOP_TYPE_OFFLINE){
                if(!empty($deliveryTp)) {
                    $ship_weight = 0;//店铺商品总重
                    $ship_num = 0;//店铺商品总件
                    foreach ($shop['goods_list'] as $goods) {
                        if ($goods['item_info']['ship_free'] == 0) {
                            //店铺商品总重量
                            $ship_weight = bcadd($ship_weight, $goods['item_info']['weight'], 2);
                            //商品总数
                            $ship_num = bcadd($ship_num, $goods['num'], 0);
                        }
                    }
                    //运费计算
                    $ship_price = $deliveryModel->getGoodsShipPrice($deliveryTp, $address_info['prov_id'], $ship_num, $ship_weight, bcsub($shop['goods_price'], bcadd($shop['discount_price'], $shop['coupon_price'], 2), 2));
                    if ($ship_price === false) {
                        $shop['ship_status'] = 0;
                        $ship_price = 0.00;
                    }
                    $shop['delivery_id'] = $deliveryTp['deli_id'];
                }else{
                    $shop['ship_status'] = 0;
                    $ship_price = 0.00;
                    $shop['delivery_id'] = 0;
                }
            }else{
                $ship_price = 0.00;
                $shop['delivery_id'] = 0;
            }
            $shop['ship_price'] = $ship_price;
            $cart_list[$key] = $shop;
        }
        return $cart_list;
    }

    /**
     * 获取订单运费
     * @param int $user_id          会员id
     * @param int $address_id       收货地址id
     * @param int $delivery_id      物流公司id 已改 棄用
     * @param array $delivery_id      店铺物流方式选中列表
     * @param $shop_delivery    array('商家id'=>"物流方式id")
     * @param int $shop_id      店铺id
     * @param int $channel      下单渠道id
     * @return array|bool
     */
    public function getTotal($user_id,$cart_list=array(),$address_id=0){
        //初始化合计信息
        $order_total = [
            'goods_num' => 0,
//            'goods_ship_num' => 0,//物流模板计算 以大订单为单位计算时使用
//            'goods_ship_weight' => 0.00,//物流模板计算 以大订单为单位计算时使用
//            'goods_gift_num' => 0,//物流模板计算 以大订单为单位计算时使用
            'coupon_price' => 0.00,
            'point_price' => 0.00,
            'discount_price' => 0.00,
            'goods_price' => 0.00,
            'ship_status' => 1,
            'order_ship_price' => 0.00,
            'order_price' => 0.00
        ];
        if( empty($cart_list) ){
            return $order_total;
        }
        try{
            if( !empty($address_id) ){
                $server = new Service();
                if( !empty($user_id) ) {
                    //获取会员收货地址信息
                        $address_info = $server->setHost('center_data')->post('user/address/one', ['id' => $address_id, 'user_id' => $user_id]);
                    if (!empty($address_info)) {
                        $cart_list = $this->setShopShip($address_info,$cart_list,$this->shop_delivery);
                        $this->shop_list = $cart_list;
                    }else{
                        $order_total['ship_status'] = 0;
                    }
                }else{
                    throw new Exception('用户信息异常');
                }
            }
            foreach( $cart_list as $shop ){
                if( $shop['ship_status'] == 0){
                    $order_total['ship_status'] = 0;
                }else{
                    $order_total['order_ship_price'] = bcadd( $order_total['order_ship_price'],$shop['ship_price'],2);
                }
                foreach( $shop['goods_list'] as $goods ){
                    $order_total['goods_num'] = bcadd($order_total['goods_num'],$goods['num'],0);
                    //优惠券优惠
                    $order_total['coupon_price'] = bcadd($order_total['coupon_price'],$goods['coupon_price'],2);
                    //积分抵扣金额
                    $order_total['point_price'] = bcadd($order_total['point_price'],$goods['point_price'],2);
                    //优惠金额
                    $order_total['discount_price'] = bcadd($order_total['discount_price'],$goods['discount_price'],2);
                    //商品金额计算
                    $order_total['goods_price'] = bcadd($order_total['goods_price'],$goods['sum_price'],2);
                }
            }
            //订单总金额计算
            $order_total['order_price'] = bcadd($order_total['order_ship_price'],
                bcsub(
                    $order_total['goods_price'],
                    bcadd(
                        $order_total['coupon_price'],
                        $order_total['discount_price'],
                        2
                    ),
                    2
                )
            ,2);
        }catch( Exception $e ){
            $this->error = $e->getMessage();
            return false;
        }
        return $order_total;
    }

    //商品运费计算
    public function getItemShip($shop_id,$item_id,$num=1,$delivery_id,$prov_id){
        $item_ship_info = [
            'ship_status' => 1,
            'ship_price' => 0.00
        ];
        //运费部分
        $goodsItemModel = new \app\goods\model\GoodsItem();
        $itemInfo = $goodsItemModel->getItemInfo($item_id);
        //获取默认运费模板
        $deliveryModel = new \app\system\model\Delivery();
        $deliveryTp = $deliveryModel->getDeliveryTp($shop_id,$delivery_id,$prov_id);
        $ship_price = 0.00;
        if(!empty($deliveryTp)){
            $ship_price = $deliveryModel->getGoodsShipPrice($deliveryTp,$num,bcmul($itemInfo['weight'],$num,2),bcmul($itemInfo['item_price'],$num,2));
            if( $ship_price === false ){
                $ship_price = 0.00;
            }
        }else{
            $item_ship_info['ship_status'] = 0;
        }
        $item_ship_info['ship_price'] = $ship_price;
        return $item_ship_info;
    }

    public function cancelOrder($order_info,$user_id,$is_admin=false){
        if( empty($order_info) ){
            $this->error = '订单信息不存在';
            return false;
        }
        $this->startTrans();
        try{
            $where['order_id'] = $order_info['order_id'];
            //获取所有商品订单
            $orderGoodsModel = new \app\order\model\OrderGoods();
            $goods_list = $orderGoodsModel->where($where)->select();
            if( empty($goods_list) ){
                throw new Exception('订单商品获取失败');
            }
            //处理订单回库
            $shopDepotModel = new \app\depot\model\ShopDepot();
            $shopDepotChangeModel = new \app\depot\model\ShopDepotChange();
            foreach( $goods_list as $goods ){
                $erp_info = explode(',',$goods['erp_code']);
                if( !$shopDepotModel->SaleInventoryOperation($order_info['order_sn'],$shopDepotChangeModel::TYPE_SALES_RETURN ,$order_info['shop_id'] , $erp_info[0],$erp_info[1],$goods['num']) ) {
                    throw new Exception('商品回库失败');
                }
            }
            //检查是否已支付 已支付退钱
            if( $order_info['pay_status'] == 1 ){
                //这里财务退款 //退款审核单

            }
            //更新订单状态
            $updateData = [];
            $updateData['order_status'] = 40;
            $updateData['finished_status'] = 1;
            $updateData['finished_time'] = date('Y-m-d H:i:s');
            $updateData['update_time'] = $updateData['finished_time'];
            if( !$this->where($where)->update($updateData) ){
                throw new Exception('订单状态更新失败');
            }
            //日志记录
            $orderLogModel = new \app\order\model\OrderLog();
            if( !$orderLogModel->markLog($user_id,$order_info['order_id'],'取消订单',$is_admin ? $orderLogModel::OPERATOR_TYPE_ADMIN : $orderLogModel::OPERATOR_TYPE_USER) ){
                throw new Exception('订单记录失败');
            }
            $this->commit();
        }catch( Exception $e ){
            $this->rollback();
            $this->error = $e->getMessage();
            return false;
        }
        return true;
    }

    /**
     * 自检订单发货状态
     * @param $order_id
     * @param int $order_type
     * @return bool
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function checkOrderShipFinished($order_id,$order_type=self::ORDER_TYPE_ONLINE){
        $orderGoodsModel = new \app\order\model\OrderGoods();
        $where['order_id'] = $order_id;
        $where['ship_status'] = 0;
        $unship_goods = $orderGoodsModel->where($where)->select();
        $t = date('Y-m-d H:i:s');
        if( empty($unship_goods) ){
            $updateData['shipping_status'] = 1;
            $updateData['shipping_time'] = $t;
            //自提单自动完成订单
            if( $order_type == self::ORDER_TYPE_O2O){
                $updateData['finished_status'] = 1;
                $updateData['finished_time'] = $t;
            }
            $updateData['update_time'] = $updateData['shipping_time'];
            if( !$this->where('order_id',$order_id)->update($updateData) ){
                $this->error = '订单发货状态更新失败';
                return false;
            }
        }
        return true;
    }

    //更改订单支付状态
    public function updateOrderPayStatus($order_id,$PayStatus=false){
        $t = date('Y-m-d H:i:s');
        $where['order_id'] = $order_id;
        $pay_status = $PayStatus ? 1 : 0;
        $updateData = [];
        $updateData['pay_status'] = $pay_status;
        $updateData['pay_time'] = $t;
        $updateData['update_time'] = $updateData['pay_time'];
        if( !$this->where($where)->update($updateData) ){
            return false;
        }
        return true;
    }

    public function checkCanNotPayOrder($order_id){
        return true;
    }

    /**
     * 检查订单商品状态是否需要更变订单状态
     * 若有正常商品 和 换货商品 订单状态不作任何处理
     * 若只有退货商品 订单状态左取消订单处理
     * 若有换货和退货商品 订单状态左已完成处理
     * 进行中状态 的不在判断范围
     * @param $order_id
     * @return bool
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function checkOrderStatus($order_id){
        if( empty($order_id) ){
            $this->error = '缺少订单信息';
            return false;
        }
        //获取订单所有商品单
        $orderGoodsModel = new \app\order\model\OrderGoods();
        $goodsAll = $orderGoodsModel->where('order_id',$order_id)->select();
        if(!empty($goodsAll)){
            $has_change = false;//作废 等同 已换
            $has_refund = false;
            foreach( $goodsAll as $goods ){
                switch( $goods['status'] ){
                    case '30' :
                        $has_refund = true;
                        break;
                    case '40' :
                        $has_change = true;
                        break;
                    default :
                        return true;
                        break;
                }
            }
            $t = date('Y-m-d H:i:s');
            if( $has_refund && $has_change ){//退换货均有 已完成操作
                $update['finished_status'] = 1;
                $update['finished_time'] = $t;
            }else if( $has_refund && !$has_change ){//只有退货 已取消操作
                $update['order_status'] = 40;
            }else if( !$has_refund && $has_change ){//只有换货不作操作
                return true;
            }
            $update['update_time'] = $t;
            if( !$this->where('order_id',$order_id)->update($update) ){
                $this->error = '订单状态更新失败';
                return false;
            }
        }else{
            $this->error = '订单异常';
            return false;
        }
        return true;
        exit(json_encode($goodsAll));
    }

}
