<?php
namespace app\order\controller;

use app\common\controller\Service;
use think\Exception;

class Order extends Base{

    //获取订单信息
    public function getOrderInfo(){
        $code = 020101;
        if( !$param = $this->validate->getOrderInfo(input('post.')) ){
            return errorJson($code, $this->validate->getError());
        }
        $json = [];
        try{
            $order_id = $param['order_id'];
            $order_info = $this->model->where('order_id',$order_id)->find();
            if( empty($order_info) ){
                $code = 020110;
                throw new Exception('订单信息获取失败');
            }
            $order_info['orderStatusDesc'] = $this->model->orderStatusDesc($order_info);
            $order_info['orderTypeDesc'] = $this->model->getOrderTypeDesc($order_info['order_type']);
            $json['order_info'] = $order_info;
            //获取下单用户信息
            $server = new Service();
            $user_info = $server->setHost('center_data')->post('user/user/one',['id'=>$order_info['user_id']]);
            if( empty($user_info) ){
                $code = 020111;
                throw new Exception('用户信息获取失败');
            }
            $json['user_info'] = $user_info;
            //获取店铺信息
            $shop_info = $server->setHost('center_data')->post('merchant/shop/one',['id'=>$order_info['shop_id']]);
            if( empty($shop_info) ){
                $code = 020112;
                return errorJson($code, '店铺信息获取失败');
            }
            $json['shop_info'] = $shop_info;
            //获取收货地址信息
            $orderConsigneeModel = new \app\order\model\OrderConsignee();
            $consignee = $orderConsigneeModel->getOrderConsignee($order_info['order_id']);
            if( empty($consignee) ){
                $consignee = [];
            }
            $json['consignee'] = $consignee;
            //获取订单商品
            $orderGoodsModel = new \app\order\model\OrderGoods();
            $goods_list = $orderGoodsModel->getItemList($order_info['order_id']);
            $json['goods_list'] = $goods_list;
            $orderLogModel = new \app\order\model\OrderLog();
            //获取日志记录表
            $log = $orderLogModel->where('order_id',$order_info['order_id'])
                ->order('create_time','desc')
                ->select();
            if( empty($log) ){
                $log = [];
            }
            $json['log'] = $log;
        }catch( Exception $e ){
            return errorJson(0000201, $e->getMessage());
        }
        return successJson($json);
    }
    /**
     * 获取下单商品列表
     */
    public function getBuyGoodsList(){
        if( !$param = $this->validate->getTotal(input('post.')) ) {
            return errorJson(0000201, $this->validate->getError());
        }
        $user_id = $param['user_id'];
        $address_id = empty($param['address_id']) ? 0 : $param['address_id'];//收货地址
        $shop_delivery = empty($param['shop_delivery']) ? 0 : $param['shop_delivery'];//物流类型
        $shop_id = empty($param['shop_id']) ? 0 : $param['shop_id'];
        $channel = empty($param['channel']) ? '' : $param['channel'];
        $shop_list = $this->model->getBuyGoodsList($user_id,$shop_id,$channel);
        if( $shop_list === false ){
            return errorJson(000010, $this->model->getError());
        }
        $server = new Service();
        //检查用户信息
        $user_info = $server->setHost('center_data')->post('user/user/one',['id'=>$user_id]);
        if( !empty($user_id) ) {
            //获取会员收货地址信息
            $address_info = $server->setHost('center_data')->post('user/address/one', ['id' => $address_id, 'user_id' => $user_info['id']]);
        }else{
            return errorJson(000011,'用户信息错误');
        }
        $shop_list = $this->model->setShopShip($address_info,$shop_list,$shop_delivery);
        return successJson($shop_list);
    }

    public function getTotal(){
        if( !$param = $this->validate->getTotal(input('post.')) ) {
            return errorJson(0000201, $this->validate->getError());
        }
        $user_id = $param['user_id'];
        $channel = empty($param['channel']) ? 0 : $param['channel'];
        $shop_id = empty($param['shop_id']) ? 0 : $param['shop_id'];
        //获取统计信息
        $address_id = empty($param['address_id']) ? 0 : $param['address_id'];//收货地址
//        $delivery_id = empty($param['delivery_id']) ? 0 : $param['delivery_id'];//物流类型
        $shop_delivery = empty($param['shop_delivery']) ? 0 : $param['shop_delivery'];//物流类型
        $shop_list = $this->model->getBuyGoodsList($user_id,$shop_id,$channel);
        $order_total = $this->model->getTotal($user_id,$shop_list,$address_id,$shop_delivery,$channel);
        if( $order_total === false ){
            return errorJson(000010, $this->model->getError());
        }
        return successJson($order_total);
    }

    //使用优惠券
    public function useCoupon(){

    }

    //使用积分
    public function usePoint(){

    }

    /**
     * 下单生成订单
     */
    public function createOrder(){
        if( !$param = $this->validate->createOrder(input('post.')) ) {
            return errorJson(0000201, $this->validate->getError());
        }
        //信息准备and处理
        $user_id = $param['user_id'];
        $address_id = $param['address_id'];
        $shop_delivery = $param['shop_delivery'];
        $shop_id = $param['shop_id'];
        $channel = empty($param['channel']) ? $this->model::CHANNEL_PC : $param['channel'];
        //check channel 预留用于活动使用
        if( in_array($channel,$this->model::$map_channel) ){
//            return [];
        }
        $remark = empty($param['remark']) ? '' : $param['remark'];
        $coupon_ids = empty($param['coupon_ids']) ? '' : $param['coupon_ids'];
        $point = empty($param['point']) ? 0 : $param['point'];
        $code = 000010;
        //检查用户信息
        $server = new Service();
        $user_info = $server->setHost('center_data')->post('user/user/one',['id'=>$user_id]);
        if( empty($user_info) ){
            return errorJson($code, '用户信息获取失败');
        }
        //检查收货地址信息
        $address_info = $server->setHost('center_data')->post('user/address/one', ['id' => $address_id, 'user_id' => $user_id]);
        if( empty($address_info) ){
            return errorJson($code, '收货地址信息获取失败');
        }
        //检查物流公司
//        $deliveryModel = new \app\system\model\Delivery();
//        $delivery_info = $deliveryModel->where('id',$delivery_id)->find();
//        if( empty($delivery_info) ){
//            return errorJson($code, '物流公司信息获取失败');
//        }
        //检查店铺参数
        if( !empty($shop_id) ){
            //获取店铺信息
            $shop_info = $server->setHost('center_data')->post('merchant/shop/one',['id'=>$shop_id]);
            if( empty($shop_info) ){
                return errorJson($code, '店铺信息获取失败');
            }
        }
        //获取预购商品列表
        $shop_list = $this->model->getBuyGoodsList($user_id,$shop_id,$channel);
        if( empty($shop_list) ){
            return errorJson($code, '没有需购商品');
        }
        //获取订单合计信息
//        $order_total = $this->model->getTotal($user_id,$shop_list,$address_id,$shop_delivery,$channel);
//        $shop_list = $this->model->getShopList();
        $shop_list = $this->model->setShopShip($address_info,$shop_list,$shop_delivery);
        $this->model->startTrans();
        $order_list = [];
        try{
            $masterModel = new \app\order\model\OrderMaster();
            $orderGoodsModel = new \app\order\model\OrderGoods();
            $orderConsigneeModel = new \app\order\model\OrderConsignee();
            $orderLogModel = new \app\order\model\OrderLog();
            $shopDepotModel = new \app\depot\model\ShopDepot();
            $shopDepotChangeModel = new \app\depot\model\ShopDepotChange();
            //创建主订单
            $t = date(' Y-m-d H:i:s');
            $masterData = [];
            $masterData['order_master_sn'] = $this->model->createSn($channel);
            $masterData['create_time'] = $t;
            $master_id = $masterModel->insertGetId($masterData);
            if( empty($master_id) ){
                $code = 000011;
                throw new Exception('订单创建失败');
            }
            //创建子订单
            foreach( $shop_list as $shop ){
                $orderInfoData = [];
                $orderInfoData['order_master_id'] = $master_id;
                $orderInfoData['order_sn'] = $this->model->createSn($channel);
                $orderInfoData['user_id'] = $user_id;
                $orderInfoData['goods_price'] = $shop['goods_price'];
                $orderInfoData['coupon_price'] = $shop['coupon_price'];
                $orderInfoData['discount_price'] = $shop['discount_price'];
                $orderInfoData['ship_price'] = $shop['ship_price'];
                $orderInfoData['order_price'] = bcadd($shop['ship_price'],
                    bcsub(
                        $shop['goods_price'],
                        bcadd(
                            $shop['coupon_price'],
                            $shop['discount_price'],
                            2
                        ),
                        2
                    ),
                    2
                );
                $orderInfoData['remark'] = $remark;
                $orderInfoData['shop_id'] = $shop['shop_id'];
                //这里之后再处理 自提订单
//                $orderInfoData['order_type'] = $shop['shop_type'];
                $orderInfoData['delivery_id'] = $shop['delivery_id'];
                $orderInfoData['add_channel'] = $channel;
                $orderInfoData['create_time'] = $t;
                $orderInfoData['update_time'] = $orderInfoData['create_time'];
                $order_info_id = $this->model->insertGetId($orderInfoData);
                if( empty($order_info_id) ){
                    $code = 000012;
                    throw new Exception('店铺订单创建失败');
                }
                $order_list[] = $order_info_id;
                foreach( $shop['goods_list'] as $goods ){
                    //商品库存操作
                    $erp_info = explode(',',$goods['item_info']['erp_code']);
                    if( !$shopDepotModel->SaleInventoryOperation($orderInfoData['order_sn'],$shopDepotChangeModel::TYPE_SALES_SELL ,$shop['shop_id'] , $erp_info[0],$erp_info[1],$goods['num']) ){
                        $code = 000013;
                        throw new Exception($shopDepotModel->getError());
                    }
                    //配置添加参数
                    $goodsData = [];
                    $goodsData['order_id'] = $order_info_id;
                    $goodsData['goods_id'] = $goods['item_info']['goods_id'];
                    $goodsData['goods_item_id'] = $goods['item_info']['id'];
                    $goodsData['item_images'] = $goods['item_info']['item_img'];
                    $goodsData['erp_code'] = $goods['item_info']['erp_code'];
                    $goodsData['num'] = $goods['num'];
                    $goodsData['item_price'] = $goods['item_info']['item_price'];
                    $goodsData['coupon_price'] = $goods['coupon_price'];
                    $goodsData['discount_price'] = $goods['discount_price'];
                    $goodsData['create_time'] = $t;
                    $goodsData['update_time'] = $goodsData['create_time'];
                    $insertGoodsData[] = $goodsData;
                }
                //创建商品单
                if( !$orderGoodsModel->insertAll($insertGoodsData) ){
                    $code = 000013;
                    throw new Exception('商品单创建失败');
                }
                //配置收货地址
                $consigneeData = [];
                $consigneeData['order_id'] = $order_info_id;
                $consigneeData['consignee_name'] = $address_info['name'];
                $consigneeData['mobile'] = $address_info['phone'];
                $consigneeData['province_id'] = $address_info['prov_id'];
                $consigneeData['city_id'] = $address_info['city_id'];
                $consigneeData['area_id'] = $address_info['area_id'];
                $consigneeData['address'] = $address_info['address'];
                $consigneeData['create_time'] = $t;
                $consigneeData['update_time'] = $consigneeData['create_time'];
                if( !$orderConsigneeModel->insert($consigneeData) ){
                    $code = 000014;
                    throw new Exception('商品单创建失败');
                }
                //订单日志记录
                if( !$orderLogModel->markLog($user_id,$order_info_id,'用户下单') ){
                    $code = 000015;
                    throw new Exception('下单记录失败');
                }
            }

            //清空购物车已下单商品
            $cartModel = new \app\cart\model\Cart();
            if( !$cartModel->cartOrderClear($user_id) ){
                $code = 000015;
                throw new Exception('购物车初始化失败');
            }
            $this->model->commit();
        }catch( Exception $e ){
            $this->model->rollback();
            return errorJson($code, $e->getMessage());
        }
        return successJson($order_list,'下单成功');
    }

    public function createPaymentOrder(){
        if( !$param = $this->validate->createPaymentOrder(input('post.')) ) {
            return errorJson(000001, $this->validate->getError());
        }
        $paymentModel = new \app\order\model\OrderPayment();
        if( !$payOrderSn = $paymentModel->createPaymentOrder($param['order_id'],$param['price']) ){
            return errorJson(000010, $paymentModel->getError());
        }
        return successJson($payOrderSn,'success');
    }

    //订单支付状态更改
    public function setOrderPay(){
        if( !$param = $this->validate->setOrderPay(input('post.')) ) {
            return errorJson(000001, $this->validate->getError());
        }
        $this->model->startTrans();
        try{
            $t = date('Y-m-d H:i:s');
            $where['order_id'] = $param['order_id'];
            $updateData = [];
            $updateData['pay_status'] = in_array($param['pay_status'],[0,1]) ? $param['pay_status'] : 0;
            $updateData['pay_time'] = $t;
            $updateData['update_time'] = $updateData['pay_time'];
            if( !$this->model->where($where)->update($updateData) ){
                throw new Exception('网络错误，审核失败');
            }
            //$user_id 管理员id
            $user_id = 1;
            //订单日志记录
            $orderLogModel = new \app\order\model\OrderLog();
            if( !$orderLogModel->markLog($user_id,$param['order_id'],'平台设置订单为'.($updateData['pay_status']==1 ? '已支付' : '未支付')) ){
                throw new Exception('订单记录失败');
            }
            $this->model->commit();
        }catch( Exception $e ){
            $this->model->rollback();
            return errorJson(020110, $e->getMessage());
        }
        return successJson('success','设置成功');
    }

    //订单审核
    public function orderVerify(){
        if( !$param = $this->validate->orderVerify(input('post.')) ) {
            return errorJson(000001, $this->validate->getError());
        }
        $this->model->startTrans();
        try{
            $t = date('Y-m-d H:i:s');
            $where['order_id'] = $param['order_id'];
            $updateData = [];
            $updateData['verify'] = in_array($param['verify'],[1,2]) ? $param['verify'] : 0;
            $updateData['verify_time'] = $t;
            $updateData['update_time'] = $updateData['verify_time'];
            if( !$this->model->where($where)->update($updateData) ){
                throw new Exception('网络错误，审核失败');
            }
            //$user_id 管理员id
            $user_id = 1;
            //订单日志记录
            $orderLogModel = new \app\order\model\OrderLog();
            if( !$orderLogModel->markLog($user_id,$param['order_id'],'订单审核：'.($updateData['verify']==1 ? '通过' : '未通过')) ){
                throw new Exception('订单记录失败');
            }
            $this->model->commit();
        }catch( Exception $e ){
            $this->model->rollback();
            return errorJson(020110, $e->getMessage());
        }
        return successJson('success','审核成功');
    }

    //订单发货
    public function orderShip(){
        if( !$param = $this->validate->orderVerify(input('post.')) ) {
            return errorJson(000001, $this->validate->getError());
        }
        $this->model->startTrans();
        try{
            $t = date('Y-m-d H:i:s');
            $where['order_id'] = $param['order_id'];
            $updateData = [];
            $updateData['shipping_status'] = in_array($param['ship'],[1,2]) ? $param['ship'] : 0;
            $updateData['shipping_time'] = $t;
            $updateData['update_time'] = $updateData['shipping_time'];
            if( !$this->model->where($where)->update($updateData) ){
                throw new Exception('网络错误，审核失败');
            }
            //$user_id 管理员id
            $user_id = 1;
            //订单日志记录
            $orderLogModel = new \app\order\model\OrderLog();
            if( !$orderLogModel->markLog($user_id,$param['order_id'],'订单审核发货') ){
                throw new Exception('订单记录失败');
            }
            $this->model->commit();
        }catch( Exception $e ){
            $this->model->rollback();
            return errorJson(020110, $e->getMessage());
        }
        return successJson('success','审核成功');
    }
}
?>
