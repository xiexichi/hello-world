<?php
// +----------------------------------------------------------------------
// | ThinkPHP [ WE CAN DO IT JUST THINK ]
// +----------------------------------------------------------------------
// | Copyright (c) 2006-2016 http://thinkphp.cn All rights reserved.
// +----------------------------------------------------------------------
// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )
// +----------------------------------------------------------------------
// | Author: 流年 <liu21st@gmail.com>
// +----------------------------------------------------------------------

// 应用公共文件


/**
 * [objHasPropertie 判断对象是否有属性]
 * @param  [object] $obj           [对象]
 * @param  [string] $propertieName [属性名称]
 * @return [bool]                  [TRUE/FALSE]
 */
if( !function_exists('objHasPropertie') )
{
    function objHasPropertie($obj, $propertieName){
        $reflect = new ReflectionObject($obj);

        foreach ($reflect->getProperties() as $k => $v) {
            // 判断是否有自定视图文件名
            if ($v->name == $propertieName) {
                return TRUE;
            }
        }

        return FALSE;
    }
}

/**
 * [objHasMethod 判断对象是否有此方法]
 * @param  [object] $obj           [对象]
 * @param  [string] $method [方法名称]
 * @return [bool]                  [TRUE/FALSE]
 */
if( !function_exists('objHasMethod') )
{
    function objHasMethod($obj, $method){
        $reflect = new ReflectionObject($obj);

        foreach ($reflect->getMethods() as $k => $v) {
            // 判断是否有自定视图文件名
            if ($v->name == $method) {
                return TRUE;
            }
        }

        return FALSE;
    }
}


/**
 * [p 打印函数]
 * @param  [mixed] $data [数据]
 */
if( !function_exists('p') )
{
    function p($data){
        echo '<pre>';
        print_r($data);
    }
}


/**
 * [pe 打印并终止执行函数]
 * @param  [mixed] $data [数据]
 */
if( !function_exists('pe') )
{
    function pe($data){
        echo '<pre>';
        print_r($data);
        exit;
    }
}

/**
 * 返回json数据
 * @param  integer $code  [description]
 * @param  string  $msg   [description]
 * @param  string  $state [description]
 * @param  array   $data  [description]
 * @return [type]         [description]
 */
if( !function_exists('returnJson') )
{
    function returnJson( $data = [] ,$code = 0 , $msg = '',$state = 'SUCCESS', $count = NULL){
        $result = [
            'code' => $code,
            'state'=> $state,
            'msg'  => $msg,
        ];

        if($code != 0){
            $result['state'] = 'ERROR';
        }

        // if($data){
            $result['data'] = $data;
        // }

        if ($count !== NULL) {
            $result['count'] = $count;
        }

        // 返回json数据
        return json($result);
    }
}

/**
 * [successJson 返回成功状态的json数据]
 * @param  array  $data [description]
 * @param  string $msg  [description]
 * @return [type]       [description]
 */
if( !function_exists('successJson') )
{
    function successJson($data = [],$msg = '', $count = NULL){

        // 四舍五入小数点后两位
        /*if (is_array($data)) {
            foreach ($data as $k => $v) {
                if (is_array($v)) {

                    foreach ($v as $kk => $vv) {
                        // 如果是小数
                        if (is_float($vv)) {
                            $data[$k][$kk] = round($vv, 2);
                        }
                    }

                } if (is_object($v)) {

                    $odata = $v->getData();

                    foreach ($odata as $kk => $vv) {
                        // 如果是小数
                        if (is_numeric($vv)) {
                            $odata[$kk] = round($vv, 2);
                        }
                    }
                    $v->data($odata);

                    $data[$k] = $v;
                } else {
                    // 如果是小数
                    if (is_float($v)) {
                        $data[$k] = round($v, 2);
                    }
                }
            }
        }*/


        return returnJson( $data ,$code = 0 , $msg ,$state = 'SUCCESS', $count);
    }
}


/**
 * [errorJson 返回失败状态的json数据]
 * @param  array  $code [状态码]
 * @param  string $msg  [错误提示信息]
 * @return [type]       [description]
 */
if( !function_exists('errorJson') )
{
    function errorJson($code ,$msg = ''){
        return returnJson( [] , $code , $msg ,$state = 'ERROR');
    }
}

/**
 * 输出json数据
 * @param  array   $data  [description]
 */
if( !function_exists('echoJson') )
{
    function echoJson( $json ){

        // 输出json对象数据
        header('Content-type:application/json; charset=utf-8');

        if (is_object($json)) {

            exit(json_encode($json->getData()));

        } else {

            exit(json_encode($json));
        }
    }
}


/**
 * 驼峰转下划线
 * @param  array   $data  [description]
 */
if( !function_exists('humpToLine') )
{
    function humpToLine($str){
        $str = preg_replace_callback("/([A-Z]{1})/",function($matches){
            return '_'.strtolower($matches[0]);
        },$str);

        return trim($str,'_');
    }
}


/**
 * 两个日期的差
 * @param  array   $start_date  [开始日期]
 * @param  array   $end_date    [结束日期]
 */
if( !function_exists('dateDiff') )
{
    function dateDiff($start_date, $end_date){
        $startTime = strtotime(date('Y-m-d', strtotime($start_date)));

        $endTime = strtotime(date('Y-m-d', strtotime($end_date)));

        return ($endTime - $startTime) / (3600 * 24);
    }
}

/**
* 数据简单处理(如进行trim)
* @param  val   [变量]
*/
if ( ! function_exists('clean'))
{
    function clean($data)
    {
        if ( ! empty($data)) {
            if (is_array($data)) {
                foreach ($data as $key => $value) {
                    $data[$key] = clean($value);
                }
            }else {
                return trim($data);
            }
        }
        return $data;
    }
}

/**
* 设置初始值
* @param  val   [变量]
* @param  mixed [初始值]
* @return mix
*/
if ( ! function_exists('set_init'))
{
    function set_init(&$data = '', $val = '')
    {
        if ( ! isset($data)) return $val;

        $newdata = clean($data);
        $val = clean($val);

        if (is_array($newdata)) {
            if (empty($newdata)) $newdata = $val;
        }else {
            if (empty($newdata) && $newdata !== 0) $newdata = $val;
        }

        return $newdata;
    }
}

/**
 * 添加操作日志
 */
if( !function_exists('actionLogs') )
{
    function actionLogs($log_info = NULL, $model = NULL){
        $params = [
            'log_info' => $log_info,
            'model' => $model,
        ];
        think\Hook::exec('app\\common\\hook\\Logs','run', $params);
    }
}

/**
 * [getSystemSet 获取系统设置]
 * @param  [string] $name [设置名称]
 * @param  [admix]  $default [默认值]
 */
if( !function_exists('getSystemSet') )
{
    function getSystemSet($name, $default = NULL) {
        $systemSet = think\Db::table('system_set')->where('name', $name)->find();
        if(isset($systemSet['value'])){
            return $systemSet['value'];
        }
        return $default;
    }
}


/**
 * [sizeKeySort size排序]
 * @param  [type] $arr [码数为key的数组]
 * @return [type]      [description]
 */
if( !function_exists('sizeKeySort') )
{
    function sizeKeySort($arr){
        /**
         *
         */

        $sort = [
            '7(36/37)' => '7',
            '7（36/37）' => '7',
            '8(38/39)' => '8',
            '8（38/39）' => '8',
            '9(40/41)' => '9',
            '9（40/41）' => '9',
            '10(42/43)' => '10',
            '10（42/43）' => '10',
            '11(44/45)' => '11',
            '11（44/45）' => '11',
            'HK#19' => '1',
            '110' => '1',
            '120' => '2',
            '130' => '3',
            '140' => '4',
            '150' => '5',
            '180' => '8',
            '28' => '28',
            '30' => '30',
            '31' => '31',
            '32' => '32',
            '34' => '34',
            '36' => '36',
            '38' => '38',
            '40' => '40',
            '42' => '42',
            '44' => '44',
            'F' => '1',
            'R' => '2',
            'S' => '1',
            'M' => '2',
            'L' => '3',
            'XL' => '4',
            'XS' => '5',
            'XXL' => '6',
            '3XL' => '7',
            '4XL' => '8',
            '5XL' => '9',
            '6XL' => '10',
            '7XL' => '11',
            '均码' => '2',
        ];

        $sortArr = array();

        $newArr = [];
        foreach ($arr as $k => $v) {
            $key = trim($v['size']);

            if (!isset($sort[$key])) {
                if (is_numeric($key)) {
                    $newArr[$key] = $v;
                } else {
                    $newArr[count($newArr)] = $v;
                }
                continue;
            }

            $newArr[$sort[$key]] = $v;
        }

        ksort($newArr);
        return array_values($newArr);
    }
}

/**
 * [modelList2Array 模型列表转换为数组]
 * @param  [type] $models [description]
 * @return [type]         [description]
 */
if( !function_exists('modelList2Array') )
{
    function modelList2Array($models){
        return collection($models)->toArray();
    }
}

/**
 * 递归处理树状结构数据集（多维数组）
 * @param $arr_all      待处理数据集
 * @param $parent_id    顶级父级id
 * @param $relation     关联关系项 ['parent'=>'id','son'=>'pid']
 * @return array        已处理的数据集
 */
if( !function_exists('setTree') ){
    function setTree($arr_all,$parent_id=0,$relation=['parent'=>'id','son'=>'pid']){
        $tree_arr = [];
        if( empty($relation) || empty($arr_all) ){
            return $arr_all;
        }
        $parent = isset($relation['parent']) ? $relation['parent'] : 'id';
        $son = isset($relation['son']) ? $relation['son'] : 'pid';
        if( !empty($arr_all) ){
            foreach( $arr_all as $tkey => $t ){
                if( $t[$son] == $parent_id ){
                    $t['children'] = setTree($arr_all,$t[$parent],$relation);
                    $tree_arr[] = $t;
                }
            }
        }
        return $tree_arr;
    }
}

/**
 * 递归处理树状结构多维数组转为层级列表(一维数组)
 * @param $list             array   待处理数组列表
 * @param $childField       string  子级的参数字段
 * @param $pNum             integer 初始层级 默认0
 * @param $return_list      array   默认已存在的列表项
 * @return $return_list     array   已处理的数组列表
 */
if( !function_exists('setTreeList') ) {
    function setTreeList($list, $childField='children', $pNum=0, $return_list=[]){
        if(empty($list)){
            return [];
        }
        foreach($list as $k => $v ){
            $v['pNum'] = $pNum;
            $return_list[] = $v;
            if( !empty($v[$childField]) ){
                $return_list = setTreeList($v[$childField], $childField, $pNum+1, $return_list);
            }
        }
        foreach( $return_list as $key => $val ){
            if( isset($val[$childField])){
                unset($val[$childField]);
            }
            $return_list[$key] = $val;
        }
        return $return_list;
    }
}

if( !function_exists('getCacheList') ) {
    function getCacheList($type='get',$key='',$value=''){
        switch( $type ){
            case 'set' :
                $cache = session('cache_list');
                if( empty($cache) ) {
                    $cache = [];
                }
                $cache[$key] = $value;
                session('cache_list',$cache);
                break;
            default :
                $cache = session('cache_list');
                if( empty($cache) ){
                    $cache = [];
                    session('cache_list',$cache);
                }
                break;
        }
        if( $key != '' ){
            $cache = $cache[$key];
        }
        return $cache;
    }
}
